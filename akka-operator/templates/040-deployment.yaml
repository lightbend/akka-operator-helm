{{- if .Values.provider.name }}
{{- if eq .Values.provider.name "gcp" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: ubbagent-config
data:
  config.yaml: |
    # The identity section contains authentication information used
    # by the agent.
    identities:
    - name: gcp
      gcp:
        # This parameter accepts a base64-encoded JSON service
        # account key. The value comes from the reporting secret.
        encodedServiceAccountKey: $AGENT_ENCODED_KEY

    # The metrics section defines the metric that will be reported.
    # Metric names should match verbatim the identifiers created
    # during pricing setup.
    metrics:
    - name: akka_cloud_platform_cpu_time
      type: int

      # The endpoints section of a metric defines which endpoints the
      # metric data is sent to.
      endpoints:
      - name: on_disk
      - name: servicecontrol

      # The aggregation section indicates that reports that the agent
      # receives for this metric should be aggregated for a specified
      # period of time prior to being sent to the reporting endpoint.
      aggregation:
        bufferSeconds: 60

    - name: instance_time
      type: int
      endpoints:
      - name: on_disk
      - name: servicecontrol

      # The passthrough marker indicates that no aggregation should
      # occur for this metric. Reports received are immediately sent
      # to the reporting endpoint. We use passthrough for the
      # instance_time metric since reports are generated
      # automatically by a heartbeat source defined in a later
      # section.
      passthrough: {}

    # The endpoints section defines where metering data is ultimately
    # sent. Currently supported endpoints include:
    # * disk - some directory on the local filesystem
    # * servicecontrol - Google Service Control
    endpoints:
    - name: on_disk
      # The disk endpoint is useful for debugging, but its inclusion
      # is not necessary in a production deployment.
      disk:
        reportDir: /var/lib/ubbagent/reports
        expireSeconds: 3600
    - name: servicecontrol
      servicecontrol:
        identity: gcp
        # The service name is unique to your application and will be
        # provided during onboarding.
        serviceName: my-application.mp-my-company.appspot.com
        consumerId: $AGENT_CONSUMER_ID  # From the reporting secret

    # The sources section lists metric data sources run by the agent
    # itself. The currently-supported source is 'heartbeat', which
    # sends a defined value to a metric at a defined interval. In
    # this example, the heartbeat sends a 60-second value through the
    # "instance_time" metric every minute.
    sources:
    - name: instance_time_heartbeat
      heartbeat:
        metric: instance_time
        intervalSeconds: 60
        value:
          int64Value: 60
{{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "akka-operator.fullname" . }}
  labels:
    {{- include "akka-operator.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "akka-operator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "akka-operator.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "akka-operator.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          # No provider name found
          {{- if (not .Values.provider.name) }}
          image: {{ fail "A valid .Values.provider.name entry required! Valid values: gcp, aws" }}
          # provider aws and repository not set: set aws default repository
          {{- else if and (eq .Values.provider.name "aws") (not .Values.image.repository) }}
          image: "{{ .Values.defaultAWSRepository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          # provider gcp and repository not set: set gcp default repository
          {{- else if and (eq .Values.provider.name "gcp") (not .Values.image.repository) }}
          image: "{{ .Values.defaultGCPRepository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          # provider set to something else but no repository found
          {{- else if (not .Values.image.repository) }}
          image: {{ fail "A valid .Values.image.repository entry required!" }}
          # set to the repository found
          {{- else }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: health-port
              containerPort: 8558
              protocol: TCP
          readinessProbe:
            httpGet:
              port: health-port
              path: "/ready"
            periodSeconds: 10
            initialDelaySeconds: 20
            failureThreshold: 3
          livenessProbe:
            httpGet:
              port: health-port
              path: "/alive"
            periodSeconds: 10
            initialDelaySeconds: 20
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: {{ .Values.java_tool_options }}
            - name: OPERATOR_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: OPERATOR_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        {{- if .Values.provider.name }}
        {{- if eq .Values.provider.name "gcp" }}
        - name: ubbagent
          image: "gcr.io/lightbend-public/akka-cloud-platform/ubbagent:{{ .Values.imageUbbagent.tag | default .Chart.AppVersion }}"
          env:
          - name: AGENT_CONFIG_FILE
            value: "/etc/ubbagent/config.yaml"
          - name: AGENT_LOCAL_PORT
            value: "4567"
          - name: AGENT_ENCODED_KEY
            valueFrom:
              secretKeyRef:
                name: $reportingSecret
                key: reporting-key
          - name: AGENT_CONSUMER_ID
            valueFrom:
              secretKeyRef:
                name: $reportingSecret
                key: consumer-id
          volumeMounts:
          - name: ubbagent-config
            mountPath: /etc/ubbagent
      volumes:
        - name: ubbagent-config
          configMap:
            name: ubbagent-config
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
